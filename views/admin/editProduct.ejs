<%- include('../layout/adminHeader.ejs') %>

  <div class="content">
    <div class="row">
      <div class="col-md-8">
        <div class="card p-5">
          <div class="card-header">
            <h5 class="title">Edit Product</h5>
          </div>
          <div class="card-body">
            <form action="/admin/editProduct" method="POST" enctype="multipart/form-data" id="editProductForm">

              <div class="row">
                <div class="col-md-5 pr-1">
                  <div>
                    <label for="images">Product Images</label>
                    <div  class="imagePreview">
                      <% products.images.forEach(image=> { %>
                        <img src="<%= image.url %>"> 
                        <a href="#" class="deleteImage" data-product-id=" <%=products._id %>"  data-image-id="<%=image.public_id %>">Delete</a>

                        <% }) %>
                    </div>
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-5 pr-1">
                  <div>
                    <div id="imagePreview" class="imagePreview">
                    </div>
                    <input type="file" name="image" id="imageInput" class="m-3" multiple>
                  </div>
                </div>
              </div>


              <div class="row">
                <div class="col-md-6 pr-1">
                  <div class="form-group">
                    <label for="productName">Product name:</label>
                    <input type="text" class="form-control" id="productName" name="productName"
                      value="<%= products.productName %>" required>
                    <div id="nameError"></div>
                    <div id="successMessage" class="success-message" style="display: none;">
                      Product updated successfully!
                    </div>
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-md-6 pr-1">
                  <div class="form-group">
                    <label for="category">Category:</label>
                    <!-- <input type="text"  class="form-control" id="category" name="category" value="<%= products.category.name %>"> -->
                    <select class="form-control" name="category" id="category">
                      <% categories.forEach(category=>{%>
                        <option value="<%= category._id %>">
                          <%= category.name%>
                        </option>

                        <%} )%>
                    </select>
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-6 pr-1">
                  <div class="form-group">
                    <label for="description">Description:</label>
                    <textarea name="description" rows="4" cols="80" class="form-control" id="description"
                      required><%= products.description %></textarea>
                  </div>
                </div>
              </div>


              <div class="row">
                <div class="col-md-6 pr-1">
                  <div class="form-group">
                    <label for="totalQuantity">Quantity/kg</label>
                    <input type="number" id="totalQuantity" class="form-control" name="totalQuantity"
                      value="<%= products.totalQuantity %>" required>
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-md-6 pr-1">
                  <div class="form-group">
                    <label for="pricePer100g">Price per 100g</label>
                    <input type="number" id="pricePer100g" class="form-control" name="pricePer100g"
                      value="<%= products.pricePer100g %>" required>
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-md-6 pr-1">
                  <div class="form-group">
                    <label for="totalPrice">Total Price(â‚¹)</label>
                    <input type="number" class="form-control" placeholder="Total price" id="totalPrice"
                      name="totalPrice" value="<%= products.totalPrice %>" readonly>
                  </div>
                </div>
              </div>

              <button type="button" class="btn btn-primary" id="calculateButton" onclick="findTotal()">Find Total
                Price</button>

              <div class="row">
                <div class="col-md-6 pr-1">
                  <div class="form-group">
                    <label for="offerPercentage">Offer Percentage (%)</label>
                    <input type="number" class="form-control" name="offerPercentage" min="0" max="80"
                      value="<%= products.offerPercentage %>" id="offerPercentage">
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-md-6 pr-1">
                  <div class="form-group">
                    <label for="offerPrice">After Offer</label>
                    <input type="number" class="form-control" name="offerPrice" id="offerPrice"
                      value="<%= products.offerPrice %>" readonly>
                  </div>
                </div>
              </div>
              <button type="button" class="btn btn-primary" id="calculateOffer" onclick="findOfferPrice()"> Total
                Price(after offer)</button>



              <div class="row">
                <div class="col-md-12">
                  <div class="form-group">
                    <input type="hidden" name="id" value="<%= products._id %>">
                    <button type="submit" class="btn btn-fill-out btn-block hover-up">Update Product</button>
                    <a href="/admin/viewProducts">Cancel</a>


                  </div>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>




  <style>
    .error-message {
      color: red;
    }

    .error-message {
      color: red;
      font-size: 14px;
      font-weight: bold;

    }
  </style>
  <script>
    //delete image from the dom
   document.addEventListener("DOMContentLoaded", function() {
    document.querySelectorAll('.deleteImage').forEach(link => {
        link.addEventListener('click', async function (event) {
            event.preventDefault();
            console.log('Delete link clicked');

            const productId = this.dataset.productId;
            const imageId = this.dataset.imageId;
            console.log(productId, '====================productId')
            console.log(imageId, '====================imageId')
            try {
                const response = await fetch(`/admin/deleteImage/${productId}/${imageId}`, {
                    method: 'POST'
                });
                console.log(response,'===============================response in edit ');
                if (response.ok) {
                    const deletedImageId = await response.json();
                    console.log("Deleted image ID:", deletedImageId);
                    
                    const imageElement = document.querySelector(`[data-image-id=="${deletedImageId}"]`);
                    if (imageElement) {
                        const parentElement = imageElement.parentNode;
                        console.log("Parent element:", parentElement);
                        parentElement.remove(); 
                    } else {
                        console.error("Image element not found.");
                    }
                } else {
                    console.error('Failed to delete the image');
                }
            } catch (error) {
                console.error('Error deleting the image===========catch error editProduct:', error);
            }
        });
    });
});


    //image preview
    document.getElementById('imageInput').addEventListener('change', function (event) {
      var files = event.target.files;
      var imagePreview = document.getElementById('imagePreview');

      imagePreview.innerHTML = '' //clear the previous one

      for (var i = 0; i < files.length; i++) {
        var file = files[i];
        var reader = new FileReader();

        reader.onload = function (e) {
          var img = document.createElement('img');
          img.src = e.target.result;
          img.width = 200; // Adjust as needed
          img.height = 200; // Adjust as needed
          img.style.marginBottom = '5px'; // Adjust as needed

          var container = document.createElement('div');
          container.classList.add('me-3', 'mb-3');
          container.appendChild(img);

          // Create delete button
          var deleteButton = document.createElement('button');
          deleteButton.textContent = 'Delete';
          deleteButton.classList.add('btn', 'btn-danger', 'ms-2');
          deleteButton.addEventListener('click', function () {
            // Remove the parent container when delete button is clicked
            container.remove();
          });
          container.appendChild(deleteButton);

          // Append each image to the imagePreview container
          imagePreview.appendChild(container);
        };

        reader.readAsDataURL(file);
      }
    });


    // //to validate the minimum price and minimum quantity
    document.addEventListener('DOMContentLoaded', function () {
      const editProductForm = document.getElementById('editProductForm');
      const totalQuantity = document.getElementById('totalQuantity');
      const priceInput = document.getElementById('pricePer100g')
      const priceError = document.getElementById('priceError');
      const quantityError = document.getElementById('quantityError');


      function minimumquantity(totalQuantity) {
        const quantity = parseFloat(document.getElementById('totalQuantity').value);
        if (quantity < 0) {
          return false;
        }
        return true;
      }

      function priceminimum(pricePer100g) {
        const price = parseFloat(document.getElementById('pricePer100g').value);
        if (price < 0) {
          return false;
        }
        return true;
      }


      editProductForm.addEventListener('submit', async function (event) {
        event.preventDefault();
        const isValidQuantity = minimumquantity(totalQuantity.value);
        const isValidPrice = priceminimum(pricePer100g.value)
        if (!isValidQuantity) {
          quantityError.textContent = 'Quantity should be greater than 0';
          return;
        }
        if (!isValidPrice) {
          quantityError.textContent = 'Price should be greater than 0';
          return;
        }
      })

    })


    //to find the total price of quantity 

    function findTotal() {
      let pricePer100g = parseFloat(document.getElementById('pricePer100g').value);//20rupee
      let totalQuantityinKg = parseFloat(document.getElementById('totalQuantity').value); //2000kg
      //1g= 20/100
      //1kg= 1000g
      //2000kg= 2000* 1000 g

      // Check if inputs are valid numbers
      if (isNaN(pricePer100g) || isNaN(totalQuantityinKg)) {
        console.error("Invalid input values");
        return;
      }

      let quantityIngram = totalQuantityinKg * 1000;
      let pricePerGram = pricePer100g / 100
      let total = quantityIngram * pricePerGram;
      if (isNaN(total)) {
        console.error("Calculation error: totalPrice is not a number");
        return;
      }

      // Update the value of totalPrice input field
      //conts num='123'
      //const result= num.toFixed(2)
      //const result= Number(num).toFixed
      document.getElementById('totalPrice').value = Number(total).toFixed(2);

    }
    // Add event listener to the button
    document.getElementById('calculateButton').addEventListener('click', findTotal);

    //==========================================================================================

    //find offer price
    function findOfferPrice() {
      let totalPrice = parseFloat(document.getElementById('totalPrice').value)
      let offerPercentage = parseFloat(document.getElementById('offerPercentage').value)

      let result = totalPrice * offerPercentage / 100

      let afterDiscount = totalPrice - result;
      document.getElementById('offerPrice').value = Number(afterDiscount).toFixed(2);

    }

    document.getElementById('calculateOffer').addEventListener('click', findOfferPrice);

    //==========================================================================================

    // validate product name
    document.addEventListener('DOMContentLoaded', function () {
      const editProductForm = document.getElementById('editProductForm');
      const productName = document.getElementById('productName');
      const nameError = document.getElementById('nameError');

      console.log(productName.value, 'is the product name in the ejs ')

      // Function to validate input
      function validate(productName) {
        const regexPattern = /^[a-zA-Z\s]{3,}$/
        return regexPattern.test(productName);
      }

      editProductForm.addEventListener('submit', async function (event) {
        event.preventDefault();
        const isValid = validate(productName.value);

        console.log(isValid, '=============is valid in the editProduct ejs===179 in editProduct.ejs ')

        if (!isValid) {
          nameError.textContent = 'Product name must contain at least minimun letter.';
          return;
        }
        const formData = new FormData(this);
        console.log([...formData]);
        try {

          const response = await fetch("/admin/editProduct", {
            method: 'POST',
            body: formData
          });
          const responseData = await response.text();

          console.log(responseData, '============================191 editProduct.ejs')
          if (!response.ok) {
            throw new Error('Failed to add product');
          }


          // Handle successful response
          nameError.textContent = '';
          const successMessage = document.getElementById('successMessage');
          successMessage.style.display = 'block';
          editProductForm.reset();

          setTimeout(() => {
            window.location.href = '/admin/viewProducts';
          }, 1000); // 2000 milliseconds = 2 seconds

        } catch (error) {
          console.error('Error:', error);
          // Handle errors in fetching or parsing response
          nameError.textContent = 'Error occurred while processing the request.';
        }
      })
    })

  </script>

  </body>

  </html>