<%- include('../layout/adminHeader.ejs') %>

  <head>
    <!-- Cropper.js CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
  </head>

  <body>
    <div class="content">
      <div class="col-md-8">
        <div class="card">
          <div class="card-header">
            <h5 class="title">Add Product</h5>
          </div>
          <div class="card-body">
            <form action="/admin/addProducts" method="POST" id="addProductForm" enctype="multipart/form-data">
              <div id="successMessage" style="display: none; color: green; font-weight: bold;"></div>
              <div id="errorMessage" style="display: none; color: red; font-weight: bold; "></div>

              <div class="row">
                <div class="col-md-5 pr-1">
                  <div>
                    <div id="imagePreview" class="imagePreview">
                      <!-- image preview -->

                    </div>
                    <label for="imageInput">Choose images</label>
                    <input type="file" name="image" id="imageInput" multiple require>
                  </div>
                  <p id="validationMessageImage"></p>
                </div>
              </div>

              <!-- Modal for cropping image -->
              <div id="cropModal" style="display: none;">
                <div>
                  <div>
                    <img id="cropImage" src="" alt="Image for cropping">
                  </div>
                  <button id="cropButton" class="btn btn-small">Crop</button>
                </div>

              </div>

              <!-- Product name and Category -->
              <div class="row">
                <div class="col-md-12 pr-1">

                  <div class="form-group">
                    <label for="productName">Product Name</label>
                    <input type="text" class="form-control" id="productName" name="productName" required>
                    <p id="validationMessage"></p>
                  </div>

                  <div class="form-group">
                    <label for="category">Choose Category </label>
                    <select class="form-control" name="category" id="category">
                      <% categories.forEach(category=>{%>
                        <option value="<%= category._id %>">
                          <%= category.name%>
                        </option>
                        <%} )%>
                    </select>
                  </div>

                </div>

              </div>
              <!-- Product description -->
              <div class="row">
                <div class="col-md-12 pr-1">
                  <div class="form-group">
                    <label for="description">Description</label>
                    <textarea name="description" rows="4" cols="80" class="form-control" id="description"
                      required></textarea>
                    <p id="validationMessageDescription"></p>
                  </div>
                </div>
              </div>
              <!-- Nutritional info -->
              <div class="row">
                <div class="col-md-12 pr-1">
                  <div class="form-group">
                    <label for="nutritionalInfo">Nutritional Information:</label>
                    <textarea name="nutritionalInfo" rows="4" cols="80" class="form-control" id="nutritionalInfo"
                      required></textarea>
                    <p id="validationMessagenutritionalInfo"></p>
                  </div>
                </div>
              </div>
              <!-- Recepies -->
              <div class="row">
                <div class="col-md-12 pr-1">
                  <div class="form-group">
                    <label for="recipies">Recepies</label>
                    <textarea name="recipies" rows="20" cols="80" class="form-control" id="recipies"
                      required></textarea>
                    <p id="validationMessagerecipies"></p>
                  </div>
                </div>
              </div>
              <!-- totalQuantity -->
              <div class="row">
                <div class="col-md-12 pr-1">
                  <div class="form-group">
                    <label for="totalQuantity">Total Quantity </label>
                    <input type="number" class="form-control"
                      placeholder="how much quantity (in kg) is there in the ware house? " id="totalQuantity"
                      name="totalQuantity" required>
                    <p id="validationMessagetotalQuantity"></p>
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-md-12 pr-1">
                  <div class="form-group">
                    <label for="pricePer100g">Price per 100g</label>
                    <input type="number" class="form-control" placeholder="Price per 100grams" id="pricePer100g"
                      name="pricePer100g" required>
                    <p id="validationMessagepricePer100g"></p>
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-md-12 pr-1">
                  <div class="form-group col-md-8 pr-1">
                    <label for="totalPrice">Total Price</label>
                    <input type="number" class="form-control" placeholder="Total price" id="totalPrice"
                      name="totalPrice" readonly>
                  </div>
                </div>
                <div class="form-group col-md-4 pr-1">
                  <button type="button" class="btn btn-primary" id="calculateButton" onclick="findTotal()">Find
                    Total
                    Price</button>
                </div>
              </div>

              <div class="row">
                <div class="col-md-12 pr-1">
                  <div class="form-group col-md-8 pr-1">
                    <label for="offerPercentage">Offer Percentage (%)</label>
                    <input type="number" class="form-control" name="offerPercentage" id="offerPercentage" value="0">
                    <p id="validationMessageofferPercentage"></p>
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-md-12 pr-1">
                  <div class="form-group col-md-8 ">
                    <label for="offerPrice">After Offer</label>
                    <input type="number" class="form-control" name="offerPrice" id="offerPrice" readonly>
                  </div>
                </div>
                <div class="col-md-4 ">
                  <button type="button" class="btn btn-primary" id="calculateOffer" onclick="findOfferPrice()">
                    Total
                    Price(after offer)</button>
                </div>
              </div>

              <div class="row">
                <div class="col-md-12">
                  <div class="form-group">
                    <button type="submit" class="btn btn-fill-out btn-block hover-up btn-success">Add
                      Product</button>
                    <a href="/admin/viewProducts">Cancel</a>
                  </div>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

    </div>
    <style>
      #imagePreview {
        background-color: white;
        border: 1px solid #ddd;
        padding: 10px;
        margin-bottom: 10px;
        overflow: hidden;
      }

      #cropModal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
        /* Semi-transparent background */
        justify-content: center;
        align-items: center;
      }

      #cropModal>div {
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
        max-width: 500px;
        width: 100%;
      }

      .card {
        margin-top: 100px;
        display: flex;
        justify-content: center;
        align-items: center;

      }

      .error-message {
        color: red;
      }

      .error-message {
        color: red;
        font-size: 14px;
        font-weight: bold;

      }

      .successMessage {
        color: rgb(23, 193, 29)
      }

      /* styles.css */
      #cropModal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
      }

      #cropModal>div {
        background: #fff;
        padding: 20px;
        border-radius: 10px;
      }

      #cropModal img {
        max-width: 100%;
        max-height: 80vh;
      }
    </style>
    <!-- Cropper.js JavaScript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>

      function validImage() {
        const imageInput = document.getElementById('imageInput');
        const validationMessage = document.getElementById('validationMessageImage');
        const validTypes = ['image/jpeg', 'image/png', 'image/gif'];

        for (let i = 0; i < imageInput.files.length; i++) {
          if (!validTypes.includes(imageInput.files[i].type)) {
            validationMessage.textContent = 'Invalid file type. Only JPEG, PNG, and GIF are allowed.';
            validationMessage.style.color = "red";
             
            // Delay the refresh slightly to allow the message to be displayed
            setTimeout(() => {
                location.reload();
            }, 1500);
            return false;
          }
        }

        validationMessage.textContent = ''; // Clear the validation message if all files are valid
        return true;
      }

      function validateProductName() {
        const productName = document.getElementById('productName').value;
        const validationMessage = document.getElementById('validationMessage');

        // Regular expression to match only letters and spaces
        const regex = /^(?!.*\s{3})[A-Za-z0-9\s]{3,30}$/;

        if (regex.test(productName)) {
          validationMessage.textContent = "Valid product name.";
          validationMessage.style.color = "green";
          return true;
        } else {
          validationMessage.textContent = "Invalid product name. Only letters and spaces are allowed.";
          validationMessage.style.color = "red";
          return false;
        }
      }

      function validateDescription() {
        const description = document.getElementById('description').value;
        const validationMessage = document.getElementById('validationMessageDescription');

        const regex = /^[A-Za-z0-9\s,.'!?;:\-()]{5,1000}$/;

        if (regex.test(description)) {
          validationMessage.textContent = "It's valid, please continue if you want to add more (maximum 1000 letters).";
          validationMessage.style.color = "green";
          return true;
        } else {
          validationMessage.textContent = "Please add the description with minimum 5 letters and maximum 1000.";
          validationMessage.style.color = "red";
          return false;
        }
      }

      function validateNutritionalInfo() {
        const nutritionalInfo = document.getElementById('nutritionalInfo').value;
        const validationMessage = document.getElementById('validationMessagenutritionalInfo');

        const regex = /^[A-Za-z0-9\s,.'!?;:\-()]{5,1000}$/;

        if (regex.test(nutritionalInfo)) {
          validationMessage.textContent = "Its valid, (maximum 500 letters).";
          validationMessage.style.color = "green";
          return true;
        } else {
          validationMessage.textContent = "Please add the this section with minimum 5 letters and maximum 1000.";
          validationMessage.style.color = "red";
          return false;
        }
      }

      function validateRecipies() {
        const recipies = document.getElementById('recipies').value;
        const validationMessage = document.getElementById('validationMessagerecipies');

        const regex = /^[A-Za-z0-9\s,.'!?;:\-()]{5,1000}$/;

        if (regex.test(recipies)) {
          validationMessage.textContent = "It's valid, (maximum 1000 letters).";
          validationMessage.style.color = "green";
          return true;
        } else {
          validationMessage.textContent = "Please add the reciepe section with minimum 5 letters and maximum 1000.";
          validationMessage.style.color = "red";
          return false;
        }
      }

      function validateTotalQuantity() {
        const totalQuantity = document.getElementById('totalQuantity').value;
        const validationMessage = document.getElementById('validationMessagetotalQuantity');

        if (totalQuantity >= 0) {
          validationMessage.textContent = "";
          validationMessage.style.color = "green";
          return true;
        } else {
          validationMessage.textContent = "Total Quantity Must be positive.";
          validationMessage.style.color = "red";
          return false;
        }
      }

      function validatepricePer100g() {
        const pricePer100g = document.getElementById('pricePer100g').value;
        const validationMessage = document.getElementById('validationMessagepricePer100g');

        if (pricePer100g > 0) {
          validationMessage.textContent = "";
          validationMessage.style.color = "green";
          return true;
        } else {
          validationMessage.textContent = "Price/100g Must be greater than 0.";
          validationMessage.style.color = "red";
          return false;
        }
      }

      function validateofferPercentage() {
        const offerPercentage = document.getElementById('offerPercentage').value;
        const validationMessage = document.getElementById('validationMessageofferPercentage');

        if (offerPercentage >= 0 && offerPercentage <= 80) {
          validationMessage.textContent = "";
          validationMessage.style.color = "green";
          return true;
        } else {
          validationMessage.textContent = "offerPercentage Must be positive, and it must be lesser than 80% .";
          validationMessage.style.color = "red";
          return false;
        }
      }

      document.addEventListener('DOMContentLoaded', function () {

        const imageInput = document.getElementById('imageInput');
        const imagePreview = document.getElementById('imagePreview');
        const cropModal = document.getElementById('cropModal');
        const cropImage = document.getElementById('cropImage');
        const cropButton = document.getElementById('cropButton');
        const addProductForm = document.getElementById('addProductForm');

        let cropper;
        let files;
        let currentFileIndex = 0;
        const formData = new FormData();


        imageInput.addEventListener('input', validImage);

        const productNameInput = document.getElementById('productName');
        productNameInput.addEventListener('input', validateProductName);

        const descriptionInput = document.getElementById('description');
        descriptionInput.addEventListener('input', validateDescription);

        const nutritionalInfoInput = document.getElementById('nutritionalInfo');
        nutritionalInfoInput.addEventListener('input', validateNutritionalInfo);

        const recipiesInput = document.getElementById('recipies');
        recipiesInput.addEventListener('input', validateRecipies);

        const totalQuantitynput = document.getElementById('totalQuantity');
        totalQuantitynput.addEventListener('input', validateTotalQuantity);

        const pricePer100ginput = document.getElementById('pricePer100g');
        pricePer100ginput.addEventListener('input', validatepricePer100g);

        const offerPercentageinput = document.getElementById('offerPercentage');
        offerPercentageinput.addEventListener('input', validateofferPercentage);


        function showNextFileForCropping() {
          if (currentFileIndex < files.length) {
            const file = files[currentFileIndex];
            const reader = new FileReader();
            reader.onload = function (e) {
              cropImage.src = e.target.result;
              cropModal.style.display = 'flex';
              cropper = new Cropper(cropImage, {
                aspectRatio: 1,
                viewMode: 1,
              });
            };
            reader.readAsDataURL(file);
          }
        }

        imageInput.addEventListener('change', function (event) {
          files = event.target.files;
          currentFileIndex = 0;
          if (files.length > 0) {
            if (!validImage()) {
            document.getElementById('imageInput').focus();
            return;
          }
            showNextFileForCropping();
          }
        });

        cropButton.addEventListener('click', function () {
          if (cropper) {
            const canvas = cropper.getCroppedCanvas();
            cropModal.style.display = 'none';
            cropper.destroy();
            cropper = null;

            const img = document.createElement('img');
            img.src = canvas.toDataURL();
            img.width = 200;
            img.height = 200;
            img.style.marginBottom = '5px';

            const container = document.createElement('div');
            container.classList.add('me-3', 'mb-3');
            container.appendChild(img);

            const deleteButton = document.createElement('button');
            deleteButton.textContent = 'Delete';
            deleteButton.classList.add('btn', 'btn-danger', 'ms-2');
            deleteButton.addEventListener('click', function () {
              container.remove();
            });
            container.appendChild(deleteButton);

            imagePreview.appendChild(container);

            canvas.toBlob(function (blob) {
              formData.append('croppedImages', blob, `cropped-${currentFileIndex}.png`);
            }, 'image/png');

            currentFileIndex++;
            if (currentFileIndex < files.length) {
              showNextFileForCropping();
            }
          }
        });

        addProductForm.addEventListener('submit', async function (event) {
          event.preventDefault();

         

          if (!validateProductName()) {
            document.getElementById('productName').focus();
            return;
          }
          if (!validateDescription()) {
            document.getElementById('description').focus();
            return;
          }
          if (!validateRecipies()) {
            document.getElementById('recipies').focus();
            return;
          }
          if (!validateNutritionalInfo()) {
            document.getElementById('nutritionalInfo').focus();
            return;
          }
          if (!validateTotalQuantity()) {
            document.getElementById('totalQuantity').focus();
            return;
          }
          if (!validatepricePer100g()) {
            document.getElementById('pricePer100g').focus();
            return;
          }
          if (!validateofferPercentage()) {
            document.getElementById('offerPercentage').focus();
            return;
          }
          // Append other form fields to FormData
          const otherFields = new FormData(addProductForm);
          otherFields.forEach((value, key) => {

            formData.append(key, value);

          });

          try {
            const response = await fetch(addProductForm.action, {
              method: 'POST',
              body: formData
            });

            const data = await response.json();
            const successDiv = document.getElementById('successMessage');
            const errorDiv = document.getElementById('errorMessage');

            if (response.ok && data.success) {
              successDiv.textContent = data.message;
              successDiv.style.display = 'block';
              errorDiv.style.display = 'none';

              addProductForm.reset();
              imagePreview.innerHTML = ''; // Clear the image preview
            } else {
              errorDiv.textContent = data.message;
              errorDiv.style.display = 'block';
              successDiv.style.display = 'none';
            }
          } catch (error) {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.textContent = 'An unexpected error occurred';
            errorDiv.style.display = 'block';
            // Reload the page on error
            window.location.reload();
          }
        });

        window.addEventListener('click', function (event) {
          if (event.target === cropModal) {
            cropModal.style.display = 'none';
            if (cropper) {
              cropper.destroy();
              cropper = null;
            }
          }
        });
      });

      /////////////////////////////////////////////////////////////////////

      //to find the total price of quantity 
      function findTotal() {
        let pricePer100g = parseFloat(document.getElementById('pricePer100g').value);//20rupee
        let totalQuantityinKg = parseFloat(document.getElementById('totalQuantity').value); //2000kg
        //1g= 20/100
        //1kg= 1000g
        //2000kg= 2000* 1000 gi

        // Check if inputs are valid numbers
        if (isNaN(pricePer100g) || isNaN(totalQuantityinKg)) {
          console.error("Invalid input values");
          return;
        }

        let quantityIngram = totalQuantityinKg * 1000;
        let pricePerGram = pricePer100g / 100
        let total = quantityIngram * pricePerGram;
        if (isNaN(total)) {
          console.error("Calculation error: totalPrice is not a number");
          return;
        }

        // Update the value of totalPrice input field
        //conts num='123'
        //const result= num.toFixed(2)
        //const result= Number(num).toFixed
        document.getElementById('totalPrice').value = Number(total).toFixed(2);

      }
      // Add event listener to the button
      document.getElementById('calculateButton').addEventListener('click', findTotal);

      ///////////////////////////////////////////////////////////////

      //find offer price
      function findOfferPrice() {
        let totalPrice = parseFloat(document.getElementById('totalPrice').value)
        let offerPercentage = parseFloat(document.getElementById('offerPercentage').value)

        let result = totalPrice * offerPercentage / 100

        let afterDiscount = totalPrice - result;
        document.getElementById('offerPrice').value = Number(afterDiscount).toFixed(2);

      }

      document.getElementById('calculateOffer').addEventListener('click', findOfferPrice);

      //////////////////////////////////////////////


    </script>
  </body>

  <%- include('../layout/adminFooter.ejs') %>